// cpu_alert_stream

// metric: usage_user
// available_fields: "usage_guest","usage_guest_nice","usage_idle","usage_iowait", "usage_irq","usage_nice","usage_softirq","usage_steal","usage_system"

// TELEGRAF CONFIGURATION
// [[inputs.cpu]]
//   percpu = true
//   totalcpu = true
//   fielddrop = ["time_*"]

// DEFINE: kapacitor define cpu_alert_stream -type stream -tick cpu/cpu_alert_stream.tick -dbrp telegraf.autogen
// ENABLE: kapacitor enable cpu_alert_stream

// Parameters
var info = 5
var warn = 10
var crit = 20
var infoSig = 2.5
var warnSig = 3
var critSig = 3.5
var period = 1m
var every = 1m

// Dataframe
var data = stream
  |from()
    .database('telegraf')
    .retentionPolicy('autogen')
    .measurement('cpu')
    .groupBy('host')
  |window()
    .period(period)
    .every(every)
  |mean('usage_idle')
  |eval(lambda: 100.0 - "mean")
    .as('stat')

// Thresholds
var alert = data
  |eval(lambda: sigma("stat"))
    .as('sigma')
    .keep()
  |alert()
    .id('{{ .Name }}/{{ .Group }}')
    .message('{{ .ID }} is {{ .Level }} value:{{ index .Fields "stat" | printf "%0.2f" }}')
    .info(lambda: "stat" > info OR "sigma" > infoSig)
    .warn(lambda: "stat" > warn OR "sigma" > warnSig)
    .crit(lambda: "stat" > crit OR "sigma" > critSig)
    .stateChangesOnly()

// Alert
alert
  .post('http://kapacitor-alert-api.default:3000/api/alert')
